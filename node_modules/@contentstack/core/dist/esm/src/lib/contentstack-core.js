import { cloneDeep } from 'lodash';
import { serialize } from './param-serializer';
import axios from 'axios';
export function httpClient(options) {
    const defaultConfig = {
        insecure: false,
        retryOnError: true,
        headers: {},
        basePath: '',
        proxy: false,
        httpAgent: false,
        httpsAgent: false,
        timeout: 30000,
        logHandler: (level, data) => {
            if (level === 'error' && data) {
                const title = [data.name, data.message].filter((a) => a).join(' - ');
                console.error(`[error] ${title}`);
                return;
            }
            console.log(`[${level}] ${data}`);
        },
        retryCondition: (error) => {
            if (error.response && error.response.status === 429) {
                return true;
            }
            return false;
        },
        versioningStrategy: 'path',
    };
    const config = Object.assign(Object.assign({}, defaultConfig), cloneDeep(options));
    if (config.apiKey && config.headers) {
        config.headers.api_key = config.apiKey;
    }
    if (config.accessToken && config.headers) {
        config.headers.access_token = config.accessToken;
    }
    const protocol = config.insecure ? 'http' : 'https';
    const hostname = config.defaultHostname;
    const port = config.port || 443;
    const version = config.version || 'v3';
    const baseURL = config.endpoint || `${protocol}://${hostname}:${port}${config.basePath}/${version}`;
    const instance = axios.create(Object.assign(Object.assign({ 
        // Axios
        baseURL }, config), { paramsSerializer: {
            serialize,
        } }));
    instance.httpClientParams = options;
    if (config.onError) {
        instance.interceptors.response.use((response) => response, config.onError);
    }
    return instance;
}
//# sourceMappingURL=contentstack-core.js.map