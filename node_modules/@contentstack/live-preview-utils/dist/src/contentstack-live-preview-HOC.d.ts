import { IInitData, IStackSdk, OnEntryChangeCallback, OnEntryChangeCallbackUID, OnEntryChangeConfig } from "./utils/types";
import LivePreview from "./live-preview";
export declare class ContentstackLivePreview {
    static livePreview: LivePreview | null;
    static userConfig: Partial<IInitData> | null;
    static subscribers: {
        [uid: string]: OnEntryChangeCallback;
    };
    static configs: {
        params: ConstructorParameters<typeof URLSearchParams>[0];
    };
    static init(userConfig?: Partial<IInitData>): Promise<LivePreview> | undefined;
    /**
     * It is the live preview hash.
     * This hash could be used when data is fetched manually.
     */
    static get hash(): string;
    /**
     * Sets the live preview hash from the query param which is
     * accessible via `hash` property.
     * @param params query param in an object form
     */
    static setConfigFromParams(params?: ConstructorParameters<typeof URLSearchParams>[0]): void;
    private static publish;
    private static subscribe;
    /**
     * @type {function}
     * @param onChangeCallback A function param to fetch the data from contentstack database
     * @param config An optional object param, pass {skipInitialRender:Boolean} to skip init call to onChangeCallback
     * @returns Subscribed Callback UID
     */
    static onEntryChange(onChangeCallback: OnEntryChangeCallback, config?: OnEntryChangeConfig): OnEntryChangeCallbackUID;
    /**
     * @type {function}
     * @param onChangeCallback A function param to fetch the data from contentstack database on content change.
     * @returns Subscribed Callback UID
     */
    static onLiveEdit(onChangeCallback: OnEntryChangeCallback): OnEntryChangeCallbackUID;
    static unsubscribeOnEntryChange(callback: string | OnEntryChangeCallback): void;
    static getGatsbyDataFormat(sdkQuery: IStackSdk, prefix: string): Promise<any>;
    static getSdkVersion(): string;
}
export default ContentstackLivePreview;
//# sourceMappingURL=contentstack-live-preview-HOC.d.ts.map