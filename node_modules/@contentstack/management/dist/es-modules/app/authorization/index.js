import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../../core/contentstackError';
export function Authorization(http, data, params) {
  var _this = this;
  http.defaults.versioningStrategy = undefined;
  this.params = params || {};
  if (data) {
    if (data.organization_uid) {
      this.params = {
        organization_uid: data.organization_uid
      };
    }
    if (data.app_uid) {
      this.urlPath = "/manifests/".concat(data.app_uid, "/authorizations");
      /**
       * @description List all user authorizations made to an authorized app under a particular organization
       * @memberof Authorization
       * @func findAll
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').authorization().findAll()
       * .then((response) => console.log(response))
       */
      this.findAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var param,
          headers,
          response,
          _args = arguments;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              param = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              _context.prev = 1;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params)),
                params: _objectSpread({}, cloneDeep(param))
              };
              _context.next = 5;
              return http.get(_this.urlPath, headers);
            case 5:
              response = _context.sent;
              if (!response.data) {
                _context.next = 10;
                break;
              }
              return _context.abrupt("return", response.data);
            case 10:
              throw error(response);
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](1);
              throw error(_context.t0);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[1, 13]]);
      }));
      /**
       * @description Revoke all users tokens issued to an authorized app for the particular organization
       * @memberof Authorization
       * @func revokeAll
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').authorization().revokeAll()
       * .then((response) => console.log(response))
       */
      this.revokeAll = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var headers, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              headers = {
                headers: _objectSpread({}, cloneDeep(_this.params))
              };
              _context2.next = 4;
              return http["delete"](_this.urlPath, headers);
            case 4:
              response = _context2.sent;
              if (!response.data) {
                _context2.next = 9;
                break;
              }
              return _context2.abrupt("return", response.data);
            case 9:
              throw error(response);
            case 10:
              _context2.next = 15;
              break;
            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](0);
              throw error(_context2.t0);
            case 15:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[0, 12]]);
      }));
      /**
       * @description  Revoke user token issued to an authorized app for the particular organization
       * @memberof Authorization
       * @func revoke
       * @returns {Promise<Response>}
       *
       * @example
       * import * as contentstack from '@contentstack/management'
       * const client = contentstack.client({ authtoken: 'TOKEN'})
       *
       * client.organization('organization_uid').app('manifest_uid').authorization().revoke('authorization_uid')
       * .then((response) => console.log(response))
       */
      this.revoke = /*#__PURE__*/function () {
        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(authorizationUid) {
          var headers, response;
          return _regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                headers = {
                  headers: _objectSpread({}, cloneDeep(_this.params))
                };
                _context3.next = 4;
                return http["delete"]("".concat(_this.urlPath, "/").concat(authorizationUid), headers);
              case 4:
                response = _context3.sent;
                if (!response.data) {
                  _context3.next = 9;
                  break;
                }
                return _context3.abrupt("return", response.data);
              case 9:
                throw error(response);
              case 10:
                _context3.next = 15;
                break;
              case 12:
                _context3.prev = 12;
                _context3.t0 = _context3["catch"](0);
                throw error(_context3.t0);
              case 15:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[0, 12]]);
        }));
        return function (_x) {
          return _ref3.apply(this, arguments);
        };
      }();
    }
  }
}