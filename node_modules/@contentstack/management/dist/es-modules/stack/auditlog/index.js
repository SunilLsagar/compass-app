import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
import cloneDeep from 'lodash/cloneDeep';
import error from '../../core/contentstackError';
import { fetchAll, parseData } from '../../entity';

/**
 *
 * @namespace AuditLog
 */
export function AuditLog(http) {
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/audit-logs";
  if (data.logs) {
    Object.assign(this, cloneDeep(data.logs));
    this.urlPath = "/audit-logs/".concat(this.uid);

    /**
     * @description The fetch AuditLog call fetches AuditLog details.
     * @memberof AuditLog
     * @func fetch
     * @returns {Promise<Branch.Branch>} Promise for Branch instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).auditLog('audit_log_item_uid').fetch()
     * .then((log) => console.log(log))
     *
     */
    this.fetch = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var param,
        headers,
        response,
        _args = arguments;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            param = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
            _context.prev = 1;
            headers = {
              headers: _objectSpread({}, cloneDeep(this.stackHeaders)),
              params: _objectSpread({}, cloneDeep(param))
            } || {};
            _context.next = 5;
            return http.get(this.urlPath, headers);
          case 5:
            response = _context.sent;
            if (!response.data) {
              _context.next = 10;
              break;
            }
            return _context.abrupt("return", new AuditLog(http, parseData(response, this.stackHeaders)));
          case 10:
            throw error(response);
          case 11:
            _context.next = 16;
            break;
          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](1);
            throw error(_context.t0);
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee, this, [[1, 13]]);
    }));
  } else {
    /**
     * @description The Get all AuditLog request retrieves the details of all the Branch of a stack.
     * @memberof AuditLog
     * @func fetchAll
     * @param {Int} limit The limit parameter will return a specific number of Branch in the output.
     * @param {Int} skip The skip parameter will skip a specific number of Branch in the output.
     * @param {Boolean}include_count To retrieve the count of Branch.
     * @returns {ContentstackCollection} Result collection of content of specified module.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).auditLog().fetchAll()
     * .then((logs) => console.log(logs))
     *
     */
    this.fetchAll = fetchAll(http, LogCollection);
  }
  return this;
}
export function LogCollection(http, data) {
  var obj = cloneDeep(data.logs) || [];
  var logCollection = obj.map(function (userdata) {
    return new AuditLog(http, {
      logs: userdata,
      stackHeaders: data.stackHeaders
    });
  });
  return logCollection;
}