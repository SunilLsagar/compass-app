"use strict";

var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");
var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _defineProperty2 = require("@babel/runtime/helpers/defineProperty");
var _defineProperty3 = (0, _interopRequireDefault2["default"])(_defineProperty2);
var _asyncToGenerator2 = require("@babel/runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = (0, _interopRequireDefault2["default"])(_asyncToGenerator2);
exports.Branch = Branch;
exports.BranchCollection = BranchCollection;
var _regenerator = require("@babel/runtime/regenerator");
var _regenerator2 = (0, _interopRequireDefault2["default"])(_regenerator);
var _cloneDeep = require("lodash/cloneDeep");
var _cloneDeep2 = (0, _interopRequireDefault2["default"])(_cloneDeep);
var _entity = require("../../entity");
var _compare = require("./compare");
var _mergeQueue = require("./mergeQueue");
var _contentstackError = require("../../core/contentstackError");
var _contentstackError2 = (0, _interopRequireDefault2["default"])(_contentstackError);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 *
 * @namespace Branch
 */
function Branch(http) {
  var _this = this;
  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  this.stackHeaders = data.stackHeaders;
  this.urlPath = "/stacks/branches";
  data.branch = data.branch || data.branch_alias;
  delete data.branch_alias;
  if (data.branch) {
    Object.assign(this, (0, _cloneDeep2["default"])(data.branch));
    this.urlPath = "/stacks/branches/".concat(this.uid);

    /**
     * @description The Delete Branch call is used to delete an existing Branch permanently from your Stack.
     * @memberof Branch
     * @func delete
     * @returns {Object} Response Object.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').delete()
     * .then((response) => console.log(response.notice))
     */
    this["delete"] = (0, _entity.deleteEntity)(http, true);

    /**
     * @description The fetch Branch call fetches Branch details.
     * @memberof Branch
     * @func fetch
     * @returns {Promise<Branch.Branch>} Promise for Branch instance
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').fetch()
     * .then((branch) => console.log(branch))
     *
     */
    this.fetch = (0, _entity.fetch)(http, 'branch');

    /**
     * @description Compare allows you compare any or specific ContentType or GlobalFields.
     * @memberof Branch
     * @func compare
     * @returns {Compare} Instance of Compare.
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch('branch_uid').compare('compare_uid')
     *
     */
    this.compare = function (compareBranchUid) {
      var compareData = {
        stackHeaders: _this.stackHeaders
      };
      if (compareBranchUid) {
        compareData.branches = {
          base_branch: _this.uid,
          compare_branch: compareBranchUid
        };
      }
      return new _compare.Compare(http, compareData);
    };
  } else {
    /**
     * @description The Create a Branch call creates a new branch in a particular stack of your Contentstack account.
     * @memberof Branch
     * @func create
     * @returns {Promise<Branch.Branch>} Promise for Branch instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     * const branch =   {
     *      name: 'branch_name',
     *      source: 'master'
     * }
     * client.stack({ api_key: 'api_key'}).branch().create({ branch })
     * .then((branch) => { console.log(branch) })
     */
    this.create = (0, _entity.create)({
      http: http
    });

    /**
     * @description The 'Get all Branch' request returns comprehensive information about branch created in a Stack.
     * @memberof Branch
     * @func query
     * @returns {Promise<ContentstackCollection.ContentstackCollection>} Promise for ContentstackCollection instance
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch().query().find()
     * .then((collection) => { console.log(collection) })
     */
    this.query = (0, _entity.query)({
      http: http,
      wrapperCollection: BranchCollection
    });

    /**
     * @description Merge allows user to merge branches in a Stack.
     * @memberof Branch
     * @func merge
     * @returns {Object} Response Object
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * const params = {
     *   base_branch: "main",
     *   compare_branch: "dev",
     *   default_merge_strategy: "merge_prefer_base",
     *   merge_comment: "Merging dev into main",
     *   no_revert: true,
     * }
     * const mergeObj = {
     *   item_merge_strategies: [
     *     {
     *       uid: "global_field_uid",
     *       type: "global_field",
     *       merge_strategy: "merge_prefer_base"
     *     }
     *   ],
     * }
     *
     * client.stack({ api_key: 'api_key'}).branch().merge(mergeObj, params)
     */
    this.merge = /*#__PURE__*/function () {
      var _ref = (0, _asyncToGenerator3["default"])( /*#__PURE__*/_regenerator2["default"].mark(function _callee(mergeObj, params) {
        var url, header, response;
        return _regenerator2["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              url = '/stacks/branches_merge';
              header = {
                headers: _objectSpread({}, (0, _cloneDeep2["default"])(_this.stackHeaders)),
                params: params
              };
              _context.prev = 2;
              _context.next = 5;
              return http.post(url, mergeObj, header);
            case 5:
              response = _context.sent;
              if (!response.data) {
                _context.next = 10;
                break;
              }
              return _context.abrupt("return", response.data);
            case 10:
              throw (0, _contentstackError2["default"])(response);
            case 11:
              _context.next = 16;
              break;
            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](2);
              throw (0, _contentstackError2["default"])(_context.t0);
            case 16:
            case "end":
              return _context.stop();
          }
        }, _callee, null, [[2, 13]]);
      }));
      return function (_x, _x2) {
        return _ref.apply(this, arguments);
      };
    }();

    /**
     * @description Merge Queue provides list of all recent merge jobs in a Stack.
     * @memberof Branch
     * @func mergeQueue
     * @returns {MergeQueue} Instance of MergeQueue
     *
     * @example
     * import * as contentstack from '@contentstack/management'
     * const client = contentstack.client()
     *
     * client.stack({ api_key: 'api_key'}).branch().mergeQueue()
     *
     */
    this.mergeQueue = function (uid) {
      var mergeData = {
        stackHeaders: _this.stackHeaders,
        uid: uid
      };
      return new _mergeQueue.MergeQueue(http, mergeData);
    };
  }
  return this;
}
function BranchCollection(http, data) {
  var obj = (0, _cloneDeep2["default"])(data.branches) || data.branch_aliases || [];
  return obj.map(function (branchData) {
    return new Branch(http, {
      branch: branchData,
      stackHeaders: data.stackHeaders
    });
  });
}