"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entry = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@contentstack/core");
class Entry {
    constructor(client, contentTypeUid, entryUid) {
        this._queryParams = {};
        this._client = client;
        this._contentTypeUid = contentTypeUid;
        this._entryUid = entryUid;
        this._urlPath = `/content_types/${this._contentTypeUid}/entries/${this._entryUid}`;
    }
    /**
     * @method includeFallback
     * @memberof Entry
     * @description When an entry is not published in a specific language, content can be fetched from its fallback language
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeFallback().fetch();
     */
    includeFallback() {
        this._queryParams.include_fallback = 'true';
        return this;
    }
    /**
     * @method includeMetadata
     * @memberof Entry
     * @description Include the metadata for getting metadata content for the entry.
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeMetadata().fetch();
     */
    includeMetadata() {
        this._queryParams.include_metadata = 'true';
        return this;
    }
    /**
     * @method includeEmbeddedItems
     * @memberof Entry
     * @description Include Embedded Objects (Entry and Assets) along with entry/entries details.
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeEmbeddedItems().fetch();
     */
    includeEmbeddedItems() {
        this._queryParams['include_embedded_items[]'] = 'BASE';
        return this;
    }
    /**
     * @method includeContentType
     * @memberof Entry
     * @description IInclude the details of the content type along with the entries details
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeContentType().fetch();
     */
    includeContentType() {
        this._queryParams.include_content_type = 'true';
        return this;
    }
    /**
     * @method includeBranch
     * @memberof Entry
     * @description Includes the branch in result
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeBranch().fetch();
     */
    includeBranch() {
        this._queryParams.include_branch = 'true';
        return this;
    }
    /**
     * @method locale
     * @memberof Entry
     * @description The assets published in the locale will be fetched
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.assetQuery().locale('en-us').fetch();
     */
    locale(locale) {
        this._queryParams.locale = locale;
        return this;
    }
    /**
     * @method fetch
     * @memberof Entry
     * @description Fetches the entry data on the basis of the entry uid
     * @returns {Collection}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).fetch();
     */
    fetch() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield (0, core_1.getData)(this._client, this._urlPath, this._queryParams);
            if (response.entry)
                return response.entry;
            return response;
        });
    }
}
exports.Entry = Entry;
//# sourceMappingURL=entry.js.map