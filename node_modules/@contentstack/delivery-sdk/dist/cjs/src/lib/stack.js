"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const tslib_1 = require("tslib");
const asset_1 = require("./asset");
const asset_query_1 = require("./asset-query");
const content_type_1 = require("./content-type");
const contenttype_query_1 = require("./contenttype-query");
const synchronization_1 = require("./synchronization");
const taxonomy_query_1 = require("./taxonomy-query");
const global_field_query_1 = require("./global-field-query");
const global_field_1 = require("./global-field");
class Stack {
    constructor(client, config) {
        this._client = client;
        this.config = config;
    }
    asset(uid) {
        if (uid)
            return new asset_1.Asset(this._client, uid);
        return new asset_query_1.AssetQuery(this._client);
    }
    contentType(uid) {
        if (uid)
            return new content_type_1.ContentType(this._client, uid);
        return new contenttype_query_1.ContentTypeQuery(this._client);
    }
    /**
     * @method Taxonomy
     * @memberOf Stack
     * @description Sets the url to /taxonomies/entries. Pass a query to fetch entries with taxonomies
     *
     * @returns {TaxonomyQuery} * @example
     * import contentstack from '@contentstack/typescript'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
  
     * const taxonomy = stack.Taxonomy() // For taxonomy query object
     */
    taxonomy() {
        return new taxonomy_query_1.TaxonomyQuery(this._client);
    }
    ;
    globalField(uid) {
        if (uid)
            return new global_field_1.GlobalField(this._client, uid);
        return new global_field_query_1.GlobalFieldQuery(this._client);
    }
    /**
     * @method setLocale
     * @memberOf Stack
     * @description Sets the locale of the API server
     * @param {String} locale - valid locale e.g. fr-fr
     * @return {Stack}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * stack.setLocale('en-155');
     */
    setLocale(locale) {
        this.config.locale = locale;
    }
    /**
     * @method sync
     * @memberOf Stack
     * @description Syncs your Contentstack data with your app and ensures that the data is always up-to-date by providing delta updates
     * @param {object} params - params is an object that supports ‘locale’, ‘start_date’, ‘content_type_uid’, and ‘type’ queries.
     * @example
     * Stack.sync()        // For initializing sync
     * @example
     * Stack.sync({ 'locale': 'en-us'})     //For initializing sync with entries of a specific locale
     * @example
     * Stack.sync({ 'start_date': '2018-10-22'})    //For initializing sync with entries published after a specific date
     * @example
     * Stack.sync({ 'content_type_uid': 'session'})   //For initializing sync with entries of a specific content type
     * @example
     * Stack.sync({ 'type': 'entry_published'})
     * //Use the type parameter to get a specific type of content. Supports'asset_published',
     * // 'entry_published', 'asset_unpublished', 'entry_unpublished', 'asset_deleted', 'entry_deleted', 'content_type_deleted'.
     * @example
     * Stack.sync({'pagination_token': '<page_tkn>'})    // For fetching the next batch of entries using pagination token
     * @example
     * Stack.sync({'sync_token': '<sync_tkn>'})    // For performing subsequent sync after initial sync
     * @instance
     */
    sync() {
        return tslib_1.__awaiter(this, arguments, void 0, function* (params = {}, recursive = false) {
            return yield (0, synchronization_1.synchronization)(this._client, params, recursive);
        });
    }
    livePreviewQuery(query) {
        if (this.config.live_preview) {
            this.config.live_preview.live_preview = query.live_preview || 'init';
            this.config.live_preview.contentTypeUid = query.contentTypeUid;
            this.config.live_preview.entryUid = query.entryUid;
        }
    }
}
exports.Stack = Stack;
//# sourceMappingURL=stack.js.map