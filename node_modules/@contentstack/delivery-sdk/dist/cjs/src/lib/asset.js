"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asset = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@contentstack/core");
class Asset {
    constructor(client, assetUid) {
        this._queryParams = {};
        this._client = client;
        this._urlPath = `/assets/${assetUid}`;
    }
    /**
     * @method includeFallback
     * @memberof Asset
     * @description When an entry is not published in a specific language, content can be fetched from its fallback language
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').includeFallback().fetch();
     */
    includeFallback() {
        this._queryParams.include_fallback = 'true';
        return this;
    }
    /**
     * @method includeMetadata
     * @memberof Entries
     * @description Include the metadata for getting metadata content for the entry.
     * @returns {Entries}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').includeMetadata().fetch();
     */
    includeMetadata() {
        this._queryParams.include_metadata = 'true';
        return this;
    }
    /**
     * @method includeDimension
     * @memberof Asset
     * @description Includes the dimensions (height and width) of the image in result
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').includeDimension().fetch();
     */
    includeDimension() {
        this._queryParams.include_dimension = 'true';
        return this;
    }
    /**
     * @method includeBranch
     * @memberof Asset
     * @description Includes the branch in result
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').includeBranch().fetch();
     */
    includeBranch() {
        this._queryParams.include_branch = 'true';
        return this;
    }
    /**
     * @method relativeUrls
     * @memberof Asset
     * @description Includes the relative URLs of the asset in result
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').relativeUrls().fetch();
     */
    relativeUrls() {
        this._queryParams.relative_urls = 'true';
        return this;
    }
    /**
     * @method version
     * @memberof Asset
     * @description Retrieve a specific version of an asset in result
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').version(1).fetch();
     */
    version(version) {
        this._queryParams.version = String(version);
        return this;
    }
    /**
     * @method locale
     * @memberof Asset
     * @description The assets published in the locale will be fetched
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').locale('en-us').fetch();
     */
    locale(locale) {
        this._queryParams.locale = locale;
        return this;
    }
    /**
     * @method fetch
     * @memberof Asset
     * @description Fetches the asset data on the basis of the asset uid
     * @returns {Asset}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.asset('asset_uid').fetch();
     */
    fetch() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const response = yield (0, core_1.getData)(this._client, this._urlPath, this._queryParams);
            if (response.asset)
                return response.asset;
            return response;
        });
    }
}
exports.Asset = Asset;
//# sourceMappingURL=asset.js.map