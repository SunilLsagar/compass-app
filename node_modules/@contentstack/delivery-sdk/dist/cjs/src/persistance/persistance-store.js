"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersistanceStore = void 0;
const local_storage_1 = require("./storages/local-storage");
const memory_storage_1 = require("./storages/memory-storage");
class PersistanceStore {
    constructor(config) {
        this.store = local_storage_1.localStorage;
        let defaultConfig = {
            storageType: 'localStorage',
            maxAge: 1000 * 60 * 60 * 24,
            serializer: JSON.stringify,
            deserializer: JSON.parse,
        };
        defaultConfig = Object.assign(Object.assign({}, defaultConfig), config);
        this.setStore(defaultConfig.storageType, defaultConfig.storage);
        this.config = defaultConfig;
        this.name = ''; // TODO add stack api key to name
    }
    setStore(type, store) {
        switch (type) {
            case 'localStorage':
                break;
            case 'memoryStorage':
                this.store = memory_storage_1.memoryStorage;
                break;
            case 'customStorage':
                if (!store) {
                    throw new TypeError('StorageType `customStorage` should have `storage`.');
                }
                else {
                    this.store = store;
                }
                break;
        }
    }
    setItem(key, value, contentTypeUid, maxAge) {
        if (!key) {
            return;
        }
        const generatedKey = this.generateCSKey(key, contentTypeUid);
        if (!value) {
            this.store.removeItem(generatedKey);
            return;
        }
        const expiry = this.calculateExpiry(maxAge);
        let content = { value, expiry };
        if (this.config.serializer) {
            content = this.config.serializer(content);
        }
        this.store.setItem(generatedKey, content);
    }
    getItem(key, contentTypeUid) {
        const generatedKey = this.generateCSKey(key, contentTypeUid);
        const content = this.store.getItem(generatedKey);
        if (content) {
            if (this.config.deserializer) {
                const item = this.config.deserializer(content);
                if (!this.isExpire(item.expiry)) {
                    return item.value;
                }
                else {
                    this.removeItem(key, contentTypeUid);
                }
            }
        }
    }
    removeItem(key, contentTypeUid) {
        const generatedKey = this.generateCSKey(key, contentTypeUid);
        this.store.removeItem(generatedKey);
    }
    clear(contentTypeUid) {
        if (!contentTypeUid) {
            this.store.clear();
        }
        else {
            this.store.each((_, key) => {
                if (key.match(contentTypeUid)) {
                    this.store.removeItem(key);
                }
            });
        }
    }
    generateCSKey(key, contentTypeUid) {
        let keyPrefix = 'cs_store_js';
        if (contentTypeUid) {
            keyPrefix = contentTypeUid + '_' + keyPrefix;
        }
        keyPrefix = this.name + '_' + keyPrefix + '_' + key;
        return keyPrefix;
    }
    calculateExpiry(maxAge) {
        const now = new Date();
        const nowMSec = now.getTime();
        if (maxAge) {
            return nowMSec + maxAge;
        }
        else if (this.config.maxAge) {
            return nowMSec + this.config.maxAge;
        }
        return 0;
    }
    isExpire(dateTime) {
        if (dateTime) {
            return dateTime < new Date().getTime();
        }
        return true;
    }
}
exports.PersistanceStore = PersistanceStore;
//# sourceMappingURL=persistance-store.js.map