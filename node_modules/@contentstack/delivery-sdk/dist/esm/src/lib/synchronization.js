import { __awaiter } from "tslib";
import { getData } from '@contentstack/core';
import humps from 'humps';
export function synchronization(client_1) {
    return __awaiter(this, arguments, void 0, function* (client, params = {}, recursive = false) {
        const config = { params };
        if (!('paginationToken' in params || 'syncToken' in params)) {
            // for every config except sync and pagination token
            config.params = Object.assign(Object.assign({}, params), { init: true });
        }
        if (params.type && typeof params.type !== 'string') {
            const type = params.type;
            config.params = Object.assign(Object.assign({}, config.params), { type: type.join(',') });
        }
        let response = yield getData(client, '/sync', humps.decamelizeKeys(config));
        const data = response.data;
        while (recursive && 'pagination_token' in response.data) {
            const recResponse = yield getData(client, '/sync', humps.decamelizeKeys({ paginationToken: data.pagination_token }));
            recResponse.data.items = Object.assign(Object.assign({}, response.data.items), recResponse.data.items);
            response = Object.assign({}, recResponse);
        }
        return response.data;
    });
}
//# sourceMappingURL=synchronization.js.map