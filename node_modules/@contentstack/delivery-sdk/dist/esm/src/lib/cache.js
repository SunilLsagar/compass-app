// import { PersistanceStore } from '../persistance';
import { __awaiter } from "tslib";
import { PersistanceStore } from '../persistance';
import { Policy } from './types';
export function handleRequest(cacheOptions, apiKey, defaultAdapter, resolve, reject, config) {
    return __awaiter(this, void 0, void 0, function* () {
        const cacheStore = new PersistanceStore(cacheOptions);
        switch (cacheOptions.policy) {
            case Policy.NETWORK_ELSE_CACHE: {
                const apiResponse = yield defaultAdapter(config);
                if (apiResponse.data) {
                    cacheStore.setItem(apiKey, apiResponse.data, config.contentTypeUid, cacheOptions.maxAge);
                    return resolve(apiResponse.data);
                }
                else {
                    const cacheResponse = cacheStore.getItem(apiKey, config.contentTypeUid);
                    if (cacheResponse)
                        return resolve({
                            data: cacheResponse,
                            status: 200,
                            statusText: 'OK',
                            headers: {},
                            config: {},
                        });
                }
                return reject(apiResponse);
            }
            case Policy.CACHE_THEN_NETWORK: {
                const cacheResponse = cacheStore.getItem(apiKey, config.contentTypeUid);
                if (cacheResponse)
                    return resolve({
                        data: cacheResponse,
                        status: 200,
                        statusText: 'OK',
                        headers: {},
                        config: {},
                    });
                const apiResponse = yield defaultAdapter(config);
                if (apiResponse.data) {
                    cacheStore.setItem(apiKey, apiResponse.data, config.contentTypeUid, cacheOptions.maxAge);
                    return resolve(apiResponse.data);
                }
                else {
                    return reject(apiResponse);
                }
            }
            case Policy.CACHE_ELSE_NETWORK: {
                const cacheResponse = cacheStore.getItem(apiKey, config.contentTypeUid);
                if (cacheResponse)
                    return resolve({
                        data: cacheResponse,
                        status: 200,
                        statusText: 'OK',
                        headers: {},
                        config: {},
                    });
                else {
                    const apiResponse = yield defaultAdapter(config);
                    if (apiResponse.data) {
                        cacheStore.setItem(apiKey, apiResponse.data, config.contentTypeUid, cacheOptions.maxAge);
                        return resolve(apiResponse.data);
                    }
                    else {
                        return reject(apiResponse);
                    }
                }
            }
        }
    });
}
//# sourceMappingURL=cache.js.map