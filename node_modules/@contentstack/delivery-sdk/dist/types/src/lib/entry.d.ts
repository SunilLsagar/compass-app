import { AxiosInstance } from '@contentstack/core';
export declare class Entry {
    private _client;
    private _contentTypeUid;
    private _entryUid;
    private _urlPath;
    _queryParams: {
        [key: string]: string | number;
    };
    constructor(client: AxiosInstance, contentTypeUid: string, entryUid: string);
    /**
     * @method includeFallback
     * @memberof Entry
     * @description When an entry is not published in a specific language, content can be fetched from its fallback language
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeFallback().fetch();
     */
    includeFallback(): Entry;
    /**
     * @method includeMetadata
     * @memberof Entry
     * @description Include the metadata for getting metadata content for the entry.
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeMetadata().fetch();
     */
    includeMetadata(): Entry;
    /**
     * @method includeEmbeddedItems
     * @memberof Entry
     * @description Include Embedded Objects (Entry and Assets) along with entry/entries details.
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeEmbeddedItems().fetch();
     */
    includeEmbeddedItems(): Entry;
    /**
     * @method includeContentType
     * @memberof Entry
     * @description IInclude the details of the content type along with the entries details
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeContentType().fetch();
     */
    includeContentType(): Entry;
    /**
     * @method includeBranch
     * @memberof Entry
     * @description Includes the branch in result
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).includeBranch().fetch();
     */
    includeBranch(): Entry;
    /**
     * @method locale
     * @memberof Entry
     * @description The assets published in the locale will be fetched
     * @returns {Entry}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.assetQuery().locale('en-us').fetch();
     */
    locale(locale: string): Entry;
    /**
     * @method fetch
     * @memberof Entry
     * @description Fetches the entry data on the basis of the entry uid
     * @returns {Collection}
     * @example
     * import contentstack from '@contentstack/delivery-sdk'
     *
     * const stack = contentstack.Stack({ apiKey: "apiKey", deliveryToken: "deliveryToken", environment: "environment" });
     * const result = await stack.contentType(contentType_uid).entry(entry_uid).fetch();
     */
    fetch<T>(): Promise<T>;
}
